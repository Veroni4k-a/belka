Оглавление
Глоссарий 3
Введение 6
Глава 1. «Проектирование автономного роботизированного комплекса с системой компьютерного зрения» 8

1.1. Современное состояние робототехники и систем автономного навигации 
1.2. Сравнительный анализ платформ для мобильной робототехники 
1.3. Анализ систем технического зрения для задач обнаружения и трекинга объектов 
1.4. Обоснование выбора аппаратной платформы и программного обеспечения 

Глава 2. «Разработка автономного роботизированного комплекса» 
2.1. Спецификация оборудования и материалов для проекта автономного роботизированного комплекса 
2.2. Технические требования к проекту 
2.3. Постановка задач и критерии успешности реализации 
2.4. Проектирование и изготовление конструкционных элементов 
2.5. Развертывание программно-аппаратного комплекса управления 
2.6. Настройка системы связи и удаленного управления 
2.7. Интеграция сенсорных систем и периферийных устройств 
2.8. Разработка архитектуры программного обеспечения 
2.9. Реализация системы управления двигателями и сервоприводами 
2.10. Разработка алгоритмов компьютерного зрения для обнаружения человека 
2.11. Реализация системы трекинга и преследования цели 
2.12. Создание системы принятия решений и автономной навигации 
2.13. Комплексное тестирование и валидация системы 32
Заключение 35
Список используемых источников 36
Приложения 37

------------------------------------------------

Краткое содержание глав:
Глава 1 будет теоретической и должна содержать:
·	Обзор современных робототехнических комплексов
·	Сравнение Raspberry Pi vs другие одноплатные компьютеры
·	Анализ алгоритмов компьютерного зрения (YOLO, OpenPose, etc.)
·	Обоснование выбора ESP32, MX1508, и других компонентов
Глава 2 - практическая часть, где:
·	Процесс 3D-печати и сборки
·	Настройку ROS (Robot Operating System)
·	Программирование ESP32 для управления моторами
·	Реализацию детекции людей с помощью OpenCV
·	Алгоритмы преследования цели
·	Результаты тестирования и работы системы
-------------------------------------------------------------


1.1. Современное состояние робототехники и систем автономного навигации

Современная робототехника сейчас переживает бурное развитие, потому что в неё активно сходятся достижения из разных областей: искусственного интеллекта, компьютерного зрения, микроэлектроники и точного машиностроения. Раньше роботы в основном работали в строго контролируемых условиях — например, на заводских конвейерах, где всё предсказуемо и расписано по шагам. Но за последние десять лет всё изменилось: теперь главная задача — вывести роботов в реальный мир, где всё постоянно меняется. Им уже недостаточно просто выполнять заложенные команды — они должны самостоятельно принимать решения, ориентироваться в обстановке и адаптироваться к новым условиям.

Современное состояние отрасли характеризуется несколькими определяющими тенденциями:

1.  Широкая доступность электронных компонентов для разработки роботов.
Появление массового рынка одноплатных компьютеров (Raspberry Pi, Jetson Nano), доступных микроконтроллеров (ESP32, STM32), сенсоров (камер, лидаров, IMU-модулей) и систем приводов (беспилотные моторы, сервоприводы) кардинально снизило порог входа в создание функциональных робототехнических комплексов. Это позволило перенести разработку из сугубо промышленных лабораторий в университетские и даже любительские среды, стимулируя rapid prototyping (быстрое прототипирование) и инновации.

2.  Появление и развитие программных платформ и стандартов.
Стандартом для разработки сложных робототехнических систем стал - ROS (Robot Operating System) – набор фреймворков, библиотек и инструментов для создания ПО для роботов. ROS предоставляет унифицированные интерфейсы (топики, сервисы, действия) для обмена данными между узлами (нодами), что позволяет разделить сложную систему на независимые, слабосвязанные модули (управление приводами, обработка сенсорных данных, навигация, принятие решений). Это значительно ускоряет разработку и способствует повторному использованию кода.
Сейчас уже активно используется ROS2,он поддерживает новые ОП,установка более простая и легкая.Также у ROS2 есть большое комьюнети, которое поддерживает начинающих программистов.  

3.  Переход от SLAM к AI-driven Navigation.** Задача одновременной локализации и картографирования (Simultaneous Localization and Mapping, **SLAM**) долгое время была краеугольным камнем автономной навигации. Робот строил карту неизвестной среды и одновременно определял свое положение на ней. Современные системы все чаще дополняют и вытесняют классические SLAM-алгоритмы (как Lidar-SLAM, Visual-SLAM) подходами на основе глубокого обучения (Deep Learning). Нейросетевые модели позволяют роботу не просто строить карту, но и семантически ее интерпретировать («стена», «дверь», «человек»), а также обучаться навигации в сложных средах напрямую «end-to-end», минуя этап явного построения карты.

4.  Развитие систем технического зрения как ключевого источника данных.
Камера, как сенсор, предоставляет наиболее богатую и информативную data stream (поток данных) об окружающем мире. Благодаря революционным успехам в области компьютерного зрения, в частности, появлению сверточных нейронных сетей (CNN) и архитектур для детекции объектов (YOLO – You Only Look Once, SSD – Single Shot MultiBox Detector, R-CNN), современные роботы могут с высокой точностью и в реальном времени:
    *   Обнаруживать и классифицировать объекты (например, людей, животных, препятствия).
    *   Определять их пространственное положение (pose estimation).
    *   Отслеживать перемещение объектов в кадре (object tracking).
    Это открывает возможности для реализации сложных поведенческих сценариев, таких как следование за лидером (person following), обход динамических препятствий и социально приемлемое взаимодействие с людьми в антропогенной среде.

5.  Интеграция и сенсорная фузия (Sensor Fusion).** Ни один тип сенсора не является идеальным. Камеры страдают от изменения освещенности, лидары – от прозрачных и зеркальных поверхностей, одометрия накапливает ошибку. Поэтому современные навигационные системы строятся на принципе **sensor fusion** – объединении данных от разнородных сенсоров (камер, IMU, одометрии колес, дальномеров) с целью компенсации их индивидуальных недостатков и получения более точной, надежной и полной картины окружающего мира. Для этого широко используются алгоритмы фильтрации, такие как **Калмана фильтр** и его нелинейные модификации (Extended Kalman Filter, Unscented Kalman Filter).

Таким образом, современный уровень развития робототехники позволяет создавать относительно недорогие, но высокоинтеллектуальные мобильные платформы, способные решать комплексные задачи автономной навигации и взаимодействия с объектами в квазиреальных условиях. Данный проект, посвященный разработке робота-танка с системой обнаружения и преследования человека, является прямым следствием и практической реализацией этих общеотраслевых тенденций, leveraging (используя) доступную компонентную базу, открытые программные фреймворки и современные алгоритмы компьютерного зрения.


1.2 Сравнительный анализ программно-аппаратных платформ для мобильной робототехники**

Выбор программно-аппаратной платформы является одним из фундаментальных решений при проектировании мобичного робота, так как он напрямую определяет вычислительные возможности, энергоэффективность, стоимость и сложность разработки. В современной практике существует несколько устоявшихся архитектурных подходов, каждый из которых обладает своими уникальными преимуществами и областями применения, что делает их более или менее подходящими для конкретных задач.

На одном конце спектра находятся простые и надежные платформы на базе микроконтроллеров, такие как Arduino и ESP32. Их главная сила заключается в простоте программирования, низком энергопотреблении и способности работать в режиме реального времени, что делает их идеальными для задач прямого управления исполнительными механизмами, например, моторами через драйверы, чтения данных с энкодеров и простых датчиков. Платформа ESP32, в частности, получила широкое распространение благодаря встроенным модулям беспроводной связи Wi-Fi и Bluetooth, что позволяет легко организовывать дистанционное управление или создавать распределенные сети датчиков на борту робота. Однако, их вычислительная мощность серьезно ограничена, что не позволяет реализовать на них сложные алгоритмы компьютерного зрения, одновременную локализацию и картографирование (SLAM) или продвинутое планирование траекторий.

Для преодоления этих вычислительных ограничений инженеры часто прибегают к гибридной архитектуре, где микроконтроллер берет на себя функции низкоуровневого контроля, а более мощный одноплатный компьютер, такой как Raspberry Pi или NVIDIA Jetson, отвечает за выполнение ресурсоемких алгоритмов. Raspberry Pi, по сути, представляет собой полноценный компьютер под управлением операционной системы Linux, что открывает доступ к обширному набору библиотек и инструментов, написанных на Python и C++. Это стандартный выбор для образовательных и любительских проектов, где необходимо реализовать распознавание объектов с помощью камеры, базовые навигационные алгоритмы или взаимодействие с облачными сервисами. Его слабыми сторонами являются относительно невысокая производительность в задачах, требующих параллельных вычислений, и сложности с гарантированным временем отклика, что критично для систем управления в реальном времени.

Когда речь заходит о задачах автономной навигации, требующих интенсивной обработки видео- и лидарных данных в реальном времени, на первый план выходят более специализированные платформы, такие как NVIDIA Jetson. Благодаря наличию мощных графических ускорителей (GPU), архитектура Jetson оптимизирована для работы с нейронными сетями и алгоритмами компьютерного зрения, позволяя роботу самостоятельно распознавать окружение, классифицировать объекты и принимать сложные решения. Это делает данную платформу фактическим отраслевым стандартом для создания продвинутых исследовательских и коммерческих автономных роботов, беспилотных автомобилей и дронов, несмотря на ее более высокую стоимость и повышенное энергопотребление по сравнению с Raspberry Pi.

Параллельно с этим существует и альтернативный путь, представленный робототехническими фреймворками промышленного уровня, в частности ROS (Robot Operating System). Важно понимать, что ROS — это не операционная система в традиционном понимании, а скорее набор библиотек, инструментов и соглашений, предназначенных для упрощения создания сложных и надежных робототехнических систем. Основная идея ROS заключается в декомпозиции системы на множество независимых, но взаимодействующих друг с другом процессов (нод), которые обмениваются данными через унифицированный механизм сообщений. Такой подход позволяет разработчику создать модульную систему, где, например, один узел отвечает за сбор данных с лидара, другой — за построение карты, а третий — за планирование пути, причем все эти модули могут быть запущены на разных вычислительных устройствах в рамках одной сети. Использование ROS значительно ускоряет процесс разработки, обеспечивает высокую степень повторного использования кода и позволяет интегрировать готовые алгоритмы из обширного сообщества, однако он вносит дополнительную сложность и накладные расходы, что часто избыточно для небольших и простых проектов.

Таким образом, не существует универсальной «лучшей» платформы, а ее выбор является всегда компромиссным решением, зависящим от конкретных требований проекта. Для простых роботов с тривиальной логикой достаточно возможностей микроконтроллера, в то время как для создания интеллектуального автономного аппарата, способного ориентироваться в динамичной среде, практически необходима гибридная архитектура, сочетающая в себе реальное время выполнения микроконтроллера и вычислительную мощь одноплатного компьютера под управлением ROS, что и обуславливает актуальность и практическую ценность исследования подобных систем.




1.3. Анализ систем технического зрения для задач обнаружения и трекинга объектов

Современные системы технического зрения всё чаще строятся на основе комбинации классических компьютерных алгоритмов из библиотеки OpenCV и глубокого обучения с использованием фреймворка Keras. Такой гибридный подход позволяет объединить производительность традиционных методов компьютерного зрения с мощью нейронных сетей, создавая эффективные решения для задач обнаружения и трекинга объектов.

Библиотека OpenCV предоставляет богатый набор инструментов для предварительной обработки изображений, которые являются критически важным этапом в любом пайплайне компьютерного зрения. Методы вроде Gaussian Blur, бинаризации по Оцу, морфологических операций и детектора градий Кэнни позволяют эффективно подготавливать данные для последующего анализа. Особое значение имеют алгоритмы выделения признаков, такие как SIFT, SURF и ORB, которые, несмотря на появление глубокого обучения, остаются актуальными для специфических задач, особенно в условиях ограниченных вычислительных ресурсов.

Для задач обнаружения объектов OpenCV предлагает как классические методы на основе Haar-каскадов, так и современные подходы с использованием глубоких нейронных сетей через модуль dnn. Модуль dnn в OpenCV поддерживает загрузку моделей, обученных в различных фреймворках, включая TensorFlow/Keras, что позволяет создавать гибкие и производительные решения. Особенностью OpenCV является оптимизированная реализация операций компьютерного зрения, использующая SIMD-инструкции и многопоточность, что делает её идеальным выбором для этапов предобработки и постобработки данных.

Фреймворк Keras, как высокоуровневый API для глубокого обучения, значительно упрощает процесс создания и обучения нейронных сетей для задач компьютерного зрения. Его модульная архитектура и простой синтаксис позволяют быстро прототипировать сложные модели. Для обнаружения объектов в Keras доступны различные архитектуры, начиная от относительно простых сверточных сетей и заканчивая сложными детекторами вроде YOLO и SSD. Преимуществом Keras является возможность использования transfer learning, что особенно важно при работе с ограниченными наборами данных - можно взять предобученную на больших датасетах модель и дообучить её для конкретной задачи.

Интеграция OpenCV и Keras создает мощный симбиоз: OpenCV отвечает за захват видео, предобработку кадров, изменение размеров изображений и цветовые преобразования, в то время как Keras обеспечивает работу сложных нейронных сетей для детектирования объектов. Такое разделение позволяет оптимально использовать ресурсы системы, поскольку тяжелые вычисления нейросетей могут выполняться на GPU, а легковесные операции OpenCV - на CPU.

В задачах трекинга объектов комбинация OpenCV и Keras демонстрирует особую эффективность. OpenCV предоставляет реализации популярных алгоритмов трекинга, таких как KCF, CSRT и MIL, которые могут работать в реальном времени даже на маломощных устройствах. Для более сложных сценариев с множественными объектами и окклюзиями используется связка детектора на Keras и трекера из OpenCV. Нейросеть периодически запускается для обнаружения объектов, а между запусками трекеры из OpenCV отслеживают позиции обнаруженных объектов, что значительно снижает вычислительную нагрузку.

Особого внимания заслуживает возможность использования OpenCV для аугментации данных при обучении моделей в Keras. Библиотека предоставляет богатый набор преобразований: аффинные преобразования, изменения яркости и контраста, добавление шума и другие модификации изображений, которые позволяют увеличить разнообразие тренировочных данных и улучшить обобщающую способность моделей.

Для оптимизации производительности пайплайна применяются различные техники. Квантование моделей Keras позволяет уменьшить их размер и ускорить вывод без значительной потери точности. OpenCV, в свою очередь, предлагает инструменты для асинхронной обработки и потокового программирования, что особенно важно при работе с видеопотоками в реальном времени.

Практическая реализация системы обнаружения и трекинга на OpenCV и Keras обычно включает следующие этапы: захват видео потока средствами OpenCV, предобработка кадров, периодический запуск нейросети для детектирования, постобработка результатов и обновление состояния трекеров. Важным аспектом является калибровка камеры, для которой OpenCV предоставляет完备ные инструменты, позволяющие компенсировать дисторсию и получать точные геометрические измерения.

Несмотря на мощь глубокого обучения, классические алгоритмы OpenCV остаются незаменимыми для многих вспомогательных задач: фильтрации шумов, морфологических операций, поиска контуров и работы с цветовыми пространствами. В сочетании с нейронными сетями Keras они образуют сбалансированную систему, способную эффективно решать сложные задачи компьютерного зрения в различных условиях эксплуатации.

Перспективы развития связаны с дальнейшей интеграцией OpenCV и Keras, появлением специализированных слоев для компьютерного зрения и оптимизацией работы с различными аппаратными ускорителями. Уже сейчас наблюдается тенденция к созданию более легковесных моделей, способных работать в реальном времени на мобильных устройствах, где комбинация OpenCV и Keras демонстрирует особую эффективность благодаря своей гибкости и производительности.




























Инструментарий и средства разработки проекта 

1.1 Спецификация оборудования и материалов для проекта автономного роботизированного комплекса

Основные вычислительные и управляющие модули
1.  Одноплатный микрокомпьютер — Raspberry Pi 4 Model B (4GB RAM)
2.  Микроконтроллер управления приводами — ESP32-WROOM-32
3.  Система машинного зрения — Камера Raspberry Pi Camera Module 3

Силовая часть и приводная механика
4.  Моторный драйвер — Двухканальный драйвер двигателей MX1508 (1 шт. для 4-моторной конфигурации)
5.  Исполнительные механизмы — Электродвигатели постоянного тока с редуктором (4 шт.)
6.  Система освещения:
    *   Светодиоды белые высокой яркости (3 шт.) — для рабочего освещения
    *   Светодиоды красные (3 шт.) — для индикации статуса и предупреждения

Пассивные компоненты и расходные материалы

7.  Элементы токоограничения:
    *   Резисторы 150 Ом (пакет) — для цепи индикации
    *   Резисторы 100 Ом (пакет) — для цепи освещения
8.  Крепежная фурнитура:
    *   Винты метрические 3×8 мм
    *   Винты метрические 3×16 мм  
    *   Винты метрические 3×25 мм
    *   Винты самонарезающие 3×1 мм
    *   Гайки метрические M3
9.  Электромонтажные материалы:
    *   Провод монтажный многожильный в изоляции (различные цвета для коммутации)
    *   Проволока монтажная для перемычек
    *   Припой свинцово-оловянный
    *   Флюс паяльный нейтральный

Конструкционные компоненты
10. Несущая конструкция — Комплект деталей корпуса, изготовленных методом аддитивного производства (3D-печать) из инженерного пластика

Инструментарий и вспомогательное оборудование
11. Электромонтажный инструмент:
    *   Паяльная станция с регулировкой температуры
    *   Пинцет монтажный антистатический
    *   Кусачки-бокорезы
    *   Стриппер для зачистки проводов
12. Механосборочный инструмент:
    *   Отвертка крестовая наборная
    *   Головки торцевые с трещоткой
    *   Плоскогубцы комбинированные
13. Система электропитания*:
    *   Кабель питания USB Type-C
    *   Аккумулятор липополимернвй
   





 ГЛАВА 2. КОНСТРУКТОРСКО-ТЕХНОЛОГИЧЕСКАЯ ЧАСТЬ ПРОЕКТА
2.1. Разработка конструкторской документации и 3D-моделирование

Проектирование несущей конструкции и корпусных элементов роботизированного комплекса осуществлялось с применением современных систем автоматизированного проектирования. В качестве базового программного обеспечения был выбран отечественный CAD-комплекс **КОМПАС-3D**, обеспечивающий полный цикл проектирования — от создания эскизной документации до генерации управляющих программ для аддитивного производства.

2.1.1. Формирование цифровых моделей компонентов

Все структурные компоненты системы разрабатывались в формате **STL (Stereolithography)** — общепринятом отраслевом стандарте для систем трехмерной печати. Формирование библиотеки цифровых моделей осуществлялось комплексно:

- Первичное проектирование: Разработка оригинальных конструкций с нуля с учетом специфических требований проекта
- Адаптация существующих решений: Модификация готовых моделей, заимствованных с авторитетных профильных ресурсов (в частности, с платформы **Thingiverse**)
- Оптимизация геометрии: Проведение инженерного анализа на предмет обеспечения оптимального соотношения "прочность/масса" конструктивных элементов

2.1.2. Технология аддитивного производства корпусных элементов**

Изготовление физических образцов деталей осуществлялось методом **послойного синтеза (Fused Deposition Modeling, FDM)** на оборудовании для 3D-печати. Данная технология была выбрана в связи с рядом стратегических преимуществ:

- Высокая точность изготовления: Достижение допусков ±0.1 мм обеспечило идеальную сопрягаемость ответственных узлов
- Оперативность прототипирования: Сокращение цикла "концепция-реализация" до 24-48 часов
- Экономическая эффективность: Минимизация материальных затрат на этапе опытного производства
- Конструктивная гибкость: Возможность оперативного внесения изменений в геометрию компонентов без существенных временных и финансовых потерь

2.1.3. Верификация и испытания конструктивных элементов**

Все напечатанные компоненты прошли комплекс испытаний на:
- Механическую прочность при статических и динамических нагрузках
- Термостабильность в рабочих диапазонах температур
- Геометрическую соответствие проектным спецификациям
- Эргономичность  сборки и обслуживания системы

Результатом проектно-конструкторского этапа стало создание полностью адаптированного под задачи проекта корпуса роботизированного комплекса, обеспечивающего надежную защиту электронных компонентов и оптимальное распределение функциональных зон.







Начнем сборку танка с гусениц.
Теперь когда все элементы собраны необходимо заняться пайкой.
Процесс пайки






